// <auto-generated />
using System;
using HMS.Api.Repositories.HMSDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HMS.Api.Migrations.HMSDb
{
    [DbContext(typeof(HMSDbContext))]
    partial class HMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Areas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas","Location");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(150);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities","Location");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Companies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArAddress")
                        .HasMaxLength(500);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("AreaId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnAddress")
                        .HasMaxLength(500);

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FriAddress")
                        .HasMaxLength(500);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Companies","HR");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.CompanyPhones", b =>
                {
                    b.Property<Guid>("CompanyId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("PhoneTypeId");

                    b.HasKey("CompanyId", "PhoneNumber")
                        .HasName("PK_CompanyPhones_CompanyId_PhoneNumber");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("CompanyPhones","HR");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Countries","Location");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.GroupPersons", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("PersonId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GroupId", "PersonId")
                        .HasName("PK_GroupPersons_GroupId_PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("GroupPersons","HR");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Groups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Groups","HR");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Hotels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("AreaId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<byte>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Hotels","Hotel");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Needs", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Needs","Common");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Persons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("CopyOfIdentity")
                        .HasColumnType("image");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FatherArName")
                        .HasMaxLength(200);

                    b.Property<string>("FatherEnName")
                        .HasMaxLength(200);

                    b.Property<string>("FatherFriName")
                        .HasMaxLength(200);

                    b.Property<string>("FirstArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstEnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstFriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Gender");

                    b.Property<string>("LastArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastEnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastFriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MotherArName")
                        .HasMaxLength(200);

                    b.Property<string>("MotherEnName")
                        .HasMaxLength(200);

                    b.Property<string>("MotherFriName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Persons","HR");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.PhoneTypes", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes","Common");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.ReservationRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("GroupId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PersonId");

                    b.Property<Guid>("ReservationId");

                    b.Property<Guid>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ReservationId", "RoomId", "PersonId")
                        .IsUnique()
                        .HasName("UNIQUE_ReservationRooms_ReservationId_RoomId_PersonId");

                    b.ToTable("ReservationRooms","Hotel");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Reservations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("HotelId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StatusId");

                    b.Property<int>("TotalCost");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations","Hotel");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.RoomNeeds", b =>
                {
                    b.Property<Guid>("RoomId");

                    b.Property<byte>("NeedId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RoomId", "NeedId")
                        .HasName("PK_RoomNeeds_RoomId_NeedId");

                    b.HasIndex("NeedId");

                    b.ToTable("RoomNeeds","Hotel");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Rooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Cost");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("FloorNumber");

                    b.Property<Guid>("HotelId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("RoomNumber");

                    b.Property<byte>("TotalBeds");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomNumber")
                        .IsUnique()
                        .HasName("Rooms_Unique_RoomNumber");

                    b.ToTable("Rooms","Hotel");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FriName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Status","Common");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Areas", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Cities", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetRoleClaims", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserClaims", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserLogins", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserRoles", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.AspNetUserTokens", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Cities", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Companies", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Areas", "Area")
                        .WithMany("Companies")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.CompanyPhones", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Companies", "Company")
                        .WithMany("CompanyPhones")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.PhoneTypes", "PhoneType")
                        .WithMany("CompanyPhones")
                        .HasForeignKey("PhoneTypeId");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.GroupPersons", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Groups", "Group")
                        .WithMany("GroupPersons")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_GroupPersons_GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.Persons", "Person")
                        .WithMany("GroupPersons")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_GroupPersons_PersonId");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Groups", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Companies", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Hotels", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Areas", "Area")
                        .WithMany("Hotels")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Hotels_AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.ReservationRooms", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Groups", "Group")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("GroupId");

                    b.HasOne("HMS.Api.Repositories.HMSDb.Persons", "Person")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.Reservations", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.Rooms", "Room")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Reservations", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Hotels", "Hotel")
                        .WithMany("Reservations")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Api.Repositories.HMSDb.Status", "Status")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusId");

                    b.HasOne("HMS.Api.Repositories.HMSDb.AspNetUsers", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Reservations_AspUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.RoomNeeds", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Needs", "Need")
                        .WithMany("RoomNeeds")
                        .HasForeignKey("NeedId")
                        .HasConstraintName("FK_RoomNeeds_NeedId");

                    b.HasOne("HMS.Api.Repositories.HMSDb.Rooms", "Room")
                        .WithMany("RoomNeeds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Api.Repositories.HMSDb.Rooms", b =>
                {
                    b.HasOne("HMS.Api.Repositories.HMSDb.Hotels", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
